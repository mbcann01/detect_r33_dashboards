Total patients seen by clinicians: 8003
Total eligible appointments: 9121  
Total screened appointments: 5210
Total screened patients that will be contacted for recruitment: 4863
Total recruited patients that will be interviewed: 180

The details for the variables created using this file are contained here: <https://uthtmc.sharepoint.com/:w:/r/sites/SPHDETECT-RPC/Shared%20Documents/DETECT-RPC%20R61%20R33%202022/0_data_folders/02_dashboards/00_documentation/03_r33_dashboards_implementation_planning_notes.docx.docx?d=we1c72482657342aea35ede2de4e980a0&csf=1&web=1&e=nUY12K>

```{r}
library(dplyr)
library(here)
library(tidyr, include.only = c("separate_wider_delim", "crossing"))
library(ids)
library(randomNames)
library(generator, include.only = "r_phone_numbers")
```

# Clinician Screening Tracker Data
## Unique MRNs and Dyad IDs
```{r, include=FALSE}
# MRNs
set.seed(1)
mrn <- ids::random_id(8003, 4)
```

```{r}
# Dyad IDs
set.seed(123)
dyad_id <- ids::random_id(8003, 3)
```

```{r}
# Combine MRNs and Dyad IDs
mrn_dyad_ids <- data.frame(mrn, dyad_id, mrn_dyad_join = c(1:8003))
```

```{r}
# MRN Dyad join column for full mock data

set.seed(1)
mrn_dyad_join_data <- sample(
  c(1:8003, sample(c(1:8003), size = (13158 - 8003), replace = TRUE)))
```

## Visit dates
```{r, include = FALSE}
dates <- data.frame(dates = seq(as.Date('2024-07-01'), as.Date('2026-07-01'), by = "day")) 
times <- c(paste0(9:17, ":00:00"), paste0(9:17, ":30:00"))

visit_date_time <- tidyr::crossing(dates, data.frame(times)) %>% 
  mutate(
    visit_date = as.POSIXct(paste0(dates, times))
  ) %>% select(visit_date)
```

## Physician and clinics
```{r, include = FALSE}
clincs_phys <- read.csv(here::here("data", "clinics_physicians.csv")) %>%
  mutate(phys_join = c(1:68))

```

```{r}
# Physician join column for full mock data

set.seed(2)
phys_join_data <- sample(
  c(1:68, sample(c(1:68), size = (13158 - 68), replace = TRUE)))
```

## Screened assignments
```{r}
set.seed(23)
# 2906 of all 5087 eligible patients are screened
screened_op <- sample(c(rep(1, 2001), sample(c(0,1), size = 11157, replace = TRUE)))
```

## Create full mock data set

### Add ids, clinician data and appointment times

```{r, include=FALSE}
data_app <- visit_date_time %>% arrange(visit_date) %>%
  mutate(
    mrn_dyad_join = mrn_dyad_join_data,
    phys_join = phys_join_data
  ) %>% 
  # Combine with mrn dyad ID data
  left_join(., mrn_dyad_ids, by = "mrn_dyad_join") %>%
  # Combine with physician data
  left_join(., clincs_phys, by = "phys_join") %>%
  select(mrn, dyad_id, visit_date, clinic_name, name_full_phys)
```

### Add eligibility and screened status
```{r}
clin_data <- data_app %>% 
  group_by(mrn) %>%
  arrange(visit_date) %>%
  mutate(
    visit_no = row_number(),
    # Arbitrarily assign eligibility for alternating visits (odd vs even)
    eligible = case_when(
      visit_no %% 2 == 1  ~ 1,
      visit_no %% 2 == 0  ~ 0
    )
  ) %>% 
  ungroup() %>%
  mutate(
    screened = case_when(
      eligible == 1 ~ screened_op,
      TRUE          ~ NA
    )
  )
```


# Recruiting and Scheduling Tracker

## Screened Patients to be Recruited
```{r, include=FALSE}
# Filter screened patients from clinician tracker data
scr_pat <- clin_data %>% filter(screened == 1) %>% select(dyad_id) %>% 
  unique()


# Size of pool that can be contacted for recruitment
rec_n <- nrow(scr_pat)

# Create join ID
set.seed(4)
join_id <- sample(1:rec_n)

scr_pat <- data.frame(dyad_id = scr_pat, join_id)
```


```{r}
# Create call date times (weekdays only)
dates <- data.frame(dates = seq(as.Date('2026-09-01'), as.Date('2027-05-30'), by = "day")) 
times <- c(paste0(9:17, ":00:00"), paste0(9:17, ":30:00"), paste0(9:17, ":15:00"))

weekends <- c("Saturday", "Sunday")

# create combinations of data and time, de-duplicate and sort
call_date_time <- tidyr::crossing(dates, data.frame(times)) %>% 
  mutate(
    call_date_time = as.POSIXct(paste0(dates, times))
  ) %>% select(call_date_time) %>%
  # Filter out weekends
  filter(!weekdays(call_date_time) %in% weekends) %>%
  slice(1:rec_n) %>%
  mutate(
    join_id = 1:rec_n
)
```


## Create recruiter IDs

```{r}
all_rec <- paste0("rec", 1:4)

rec_id <- sample(c(rep(all_rec, 60), sample(x = all_rec, size = (rec_n-240), replace = TRUE)))
```

```{r}
rec_data <- scr_pat %>% right_join(., call_date_time, by = 'join_id') %>%
  mutate(
    rec_id = rec_id
  ) %>% arrange(call_date_time)
```

## Create mock data for each call log variable
```{r}
sample_op <- function(options){
  sample(options, size = rec_n, replace = TRUE)
}
```

```{r}
# Answered status
set.seed(4)
answered <- sample(c(rep("No answer/ busy sign", 750), rep("Participant answered", 953), rep("Voicemail", 904),
              rep("Wrong number", 124), rep("Someone else answered", 753)), size = rec_n, replace = TRUE)

# Phone numbers
set.seed(3)
participant_phone_number <- r_phone_numbers(n = rec_n)

# Text box mock entries
set.seed(1)
other_op <- sample(c(paste0("Some explanation_",1:10 ), paste0("Another explanation_", 1:18),                        
                     paste0("A different explanation_", 1:7)), size = rec_n, replace = TRUE)

# Comments mock entries
set.seed(2)
comments <- sample(c(paste0("Some comment_",1:10 ), paste0("Another comment_", 1:18), 
                      paste0("A different comment_", 1:7), rep(NA, 3005)), size = rec_n, replace = TRUE)
```


```{r}
set.seed(1)
call_data <- data.frame(rec_data, participant_phone_number, answered) %>%
  mutate(
    left_message = case_when(
      answered == "No answer/ busy sign" ~ sample_op(
        c("Left message", "Unable to leave message")), 
      answered == "Voicemail"            ~ sample_op(
        c("Left message", "Unable to leave message")),
      TRUE                               ~ NA
    ),
    no_message = case_when(
      left_message == "Unable to leave message" ~ sample_op(
        c("Voicemail box is full", "No voicemail box set up", "Other")),
      TRUE                 ~ NA
    ),
    no_message_other = case_when(
      no_message == "Other" ~ other_op,
      TRUE                  ~ NA
    ),
    answered_someone_else = case_when(
      answered == "Someone else answered" ~ sample_op(
        c("A spouse or partner", "An ex spouse or partner", 
          "A parent or step-parent",
          "A brother or sister", "A son or daughter", "Another relative", 
          "A coworker", "A neighbor", "A friend", "Some other non-relative", 
          "Donâ€™t know")
      ),
      TRUE                                ~ NA
    ),
    participant_contacted = case_when(
      answered == "Someone else answered" ~ sample_op(
        c("Participant contacted", "Participant not contacted")),
      TRUE                                ~ NA
    ),
    pc_no_result = case_when(
      participant_contacted == "Participant not contacted" ~ sample_op(
        c("Scheduled call back", "Unable to schedule callback")
      ),
      TRUE                          ~ NA
    ),
    call_back_date_time = case_when(
      pc_no_result == "Scheduled call back" ~ call_date_time + lubridate::days(2),
      TRUE                                  ~ NA
    ),
    # Remove weekends
    call_back_date_time = case_when(weekdays(call_back_date_time) %in% weekends ~ 
      call_back_date_time + lubridate::days(2),
      TRUE ~ call_back_date_time),
    call_back_phone_number = case_when(
      pc_no_result == "Scheduled call back" ~ participant_phone_number,
      TRUE                                  ~ NA 
    ),
    call_back_no = case_when(
      pc_no_result == "Unable to schedule callback" ~ sample_op(
        c("Person refused", "Language barrier", "Person hung up",
          "Participant impaired or disabled", "Participant deceased",
          "Participant not available", "Other")
      ),
      TRUE                                          ~ NA
    ),
    call_back_no_other = case_when(
      call_back_no == "Other" ~ other_op,
      TRUE                    ~ NA
    ),
    pc_yes_result = case_when(
      answered == "Participant answered" | 
        participant_contacted == "Participant contacted" ~ 
        sample_op(
          c("Interview scheduled", "Interview not scheduled")
        )
    ),
    interview_not_scheduled = case_when(
      pc_yes_result == "Interview not scheduled" ~ sample_op(
        c("Participant refused/ hung up", "Participant is not eligible")
      ),
      TRUE                                       ~ NA
    ),
    ineligible = case_when(
      interview_not_scheduled == "Participant is not eligible" ~ sample_op(
        c("Cannot speak/read English or Spanish", 
          "Unwilling/unable to give consent")
      ),
      TRUE                                                     ~ NA
    ),
    comments = comments
  ) %>% select(-c(join_id))
```


## Create a df with 1800 unique participants 
- 360 is 20% of this 
- Each participant in a previous call log was called an average of 1.7 times.
```{r}
# Split the data in half so that the first half has 1800 patients and a sample of the second half will have 1260
second_call <- call_data %>%
  mutate(
    second_call = case_when(
      pc_no_result == "Scheduled call back" ~ 1,
      answered == "No answer/ busy sign"    ~ 1,
      TRUE                                  ~ 0
    )
  )

# Filter 1260 participants for a second call and 540 of that (1800 - 1260) for only one call.
set.seed(6)
scall_y <- second_call %>% filter(second_call == 1) %>% slice_sample(n = 1260)
scall_n <- second_call %>% filter(second_call == 0) %>% slice_sample(n = 540) 

# Dyad_ids for participants that will receive a second call
scall_y_id <- scall_y %>% select(dyad_id, call_back_date_time, call_date_time) %>% 
  rename(new_id = dyad_id, 
         new_call_time = call_back_date_time,
         first_call_time = call_date_time)

# Calls that will be converted to second calls
yes_call <- second_call %>% 
  filter(second_call == 0 & !(dyad_id %in% scall_n$dyad_id)) %>% 
  slice_sample(n = 1260) %>% cbind(., scall_y_id) %>%
  # Set call time to be call back time of first call and set new id to dyad id
  mutate(
    dyad_id = new_id,
    call_date_time = case_when(
      is.na(new_call_time) == FALSE ~ new_call_time,
      TRUE                          ~ first_call_time + lubridate::days(3)
    ),
    # Remove weekends
    call_date_time = case_when(weekdays(call_date_time) %in% weekends ~ 
      call_date_time + lubridate::days(2),
      TRUE ~ call_date_time)
  ) %>%
  select(-c(new_id, new_call_time, first_call_time))
  

rec_raw_data <- rbind(scall_y, scall_n, yes_call) %>% arrange(call_date_time) %>% select(-c(second_call))

```

# Save data
```{r}
# Save clinician tracking data
saveRDS(clin_data, here::here("data", "clinician_tracker_mock_data_raw.rds"))
```

```{r}
# Save recruitment and scheduling data
saveRDS(rec_raw_data, here::here("data", "recruitment_and_scheduling_mock_data_raw.rds"))
```


